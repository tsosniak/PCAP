https://edube.org/learn/pe-2/python-essentials-2-module-2-1

1. How computers understand single characters?
Computers store characters as numbers.
Every character used by a computer corresponds to a unique number, and vice versa.

Some of these characters are called whitespaces, while others are named control characters, because their purpose is to control input/output devices.

ASCII (short for American Standard Code for Information Interchange)
The code provides space for 256 different characters


2. I18N, Code points and code pages
It was necessary to come up with something more flexible and capacious than ASCII
The word internationalization is commonly shortened to I18N.

The software I18N is a standard in present times. Each program has to be written in a way that enables it to be used all around the world, among different cultures, languages and alphabets.

A classic form of ASCII code uses eight bits for each sign - Eight bits mean 256 different characters.

Code points and code pages:
A code point is a number which makes a character. For example, 32 is a code point which makes a space in ASCII encoding

As standard ASCII occupies 128 out of 256 possible code points, you can only make use of the remaining 128.
Can you set the higher half of the code points differently for different languages?
-Yes, you can. Such a concept is called a code page.

A code page is a standard for using the upper 128 code points to store specific national characters.
For example, the code point 200 makes Č (a letter used by some Slavic languages) when utilized by the ISO/IEC 8859-2 code page

In consequence, to determine the meaning of a specific code point, you have to know the target code page.


3. Unicode
Code pages helped the computer industry to solve I18N issues for some time, but it soon turned out that they would not be a permanent solution.
The concept that solved the problem in the long term was Unicode.

Unicode assigns unique (unambiguous) characters (letters, hyphens, ideograms, etc.) to more than a million code points.

The first 128 Unicode code points are identical to ASCII, and the first 256 Unicode code points are identical to the ISO/IEC 8859-1 code page (a code page designed for western European languages).

The Unicode standard says nothing about how to code and store the characters in the memory and files. It only names all available characters and assigns them to planes - (a group of characters of similar origin, application, or nature).
!!!to implement Unicode in actual computers and computer storage systems!!! we need something more like UCS-4. - UCS-4: Universal Character Set.
UCS-4 uses 32 bits (four bytes) to store each character
As you can see, UCS-4 is a rather wasteful standard - it increases a text's size by four times compared to standard ASCII. Fortunately, there are smarter forms of encoding Unicode texts.

Another implementation for UNICODE is UTF-8 : Unicode Transformation Format.
UTF-8 uses as many bits for each of the code points as it really needs to represent them

Python 3 fully supports Unicode and UTF-8
you can use Unicode/UTF-8 encoded characters to name variables and other entities;
you can use them during all input and output.
This means that Python3 is completely I18Ned.


4. Key takeaways

1. Computers store characters as numbers. There is more than one possible way of encoding characters, but only some of them gained worldwide popularity and are commonly used in IT: these are ASCII (used mainly to encode the Latin alphabet and some of its derivates) and UNICODE (able to encode virtually all alphabets being used by humans).


2. A number corresponding to a particular character is called a codepoint.


3. UNICODE uses different ways of encoding when it comes to storing the characters using files or computer memory: two of them are UCS-4 and UTF-8 (the latter is the most common as it wastes less memory space).


Exercise 1

What is BOM?

Check
BOM (Byte Order Mark) is a special combination of bits announcing encoding used by a file's content (eg. UCS-4 or UTF-B).


Exercise 2

Is Python 3 I18Ned?

Check
Yes, it's completely internationalized - we can use UNICODE characters inside our code, read them from input and send to output.



6. Strings - a brief review
are immutable sequences.
Don't forget that a backslash (\) used as an escape character is not included in the string's total length
i_am = 'I\'m'
print(len(i_am)) >>> 3

Multiline strings
 the string starts with three apostrophes, not one.

multiline = '''Line #1
Line #2'''
print(len(multiline)) >>> 15
The missing character is simply invisible - it's a whitespace - denoted as \n - It's a special (control) character used to force a line feed (hence its name: LF)

7. Operations on strings
can be:
concatenated (joined)
replicated.

The ability to use the same operator against completely different kinds of data (like numbers vs. strings) is called overloading

Note: shortcut variants of the above operators are also applicable for strings (+= and *=).


8. Operations on strings: ord()
If you want to know a specific character's ASCII/UNICODE code point value
The function needs a one-character string as its argument - breaching this requirement causes a TypeError

ord('a') >>> 97
ord('ę') >>> 281

9. Operations on strings: chr()
If you know the code point (number) and want to get the corresponding character
The function takes a code point and returns its character.
Invoking it with an invalid argument (e.g., a negative or invalid code point) causes ValueError or TypeError exceptions.

chr(ord(x)) == x
ord(chr(x)) == x

chr(97) >>> 'a'


10. Strings as sequences: indexing
Python strings are sequences
you can treat them like lists in many particular cases.
if you want to access any of a string's characters, you can do it using indexing

Strings as sequences: iterating
Iterating through the strings works, too

11. Slices in string
slices is still usable.

alpha = "abdefg"
print(alpha[-3:4]) >>> 'e'


12. The in and not in operators
The result of the check is simply True or False.

alphabet = "abcdefghijklmnopqrstuvwxyz"
print("ghi" in alphabet) >>> True
print("Xyz" in alphabet) >>> False


13. Python strings are immutable
doesn't allow you to use the del instruction to remove anything from a string.
alphabet = "abcdefghijklmnopqrstuvwxyz"
del alphabet[0] >>> TypeError: 'str' object doesn't support item deletion

!!!The only thing you can do with del and a string is to remove the string as a whole!!!
del alphabet

alphabet = "abcdefghijklmnopqrstuvwxyz"
alphabet.append("A") >>> AttributeError: 'str' object has no attribute 'append'

creating a new copy of a string each time you modify its contents:
alphabet = "bcdefghijklmnopqrstuvwxy"
alphabet = "a" + alphabet // no error - new string created


14. Operations on strings: min() and max()
min: finds the minimum element of the sequence passed as an argument.
max: finds the maximum element of the sequence.
min("aAbByYzZ") >>> 'A'

15. Operations on strings: the index() method
searches the sequence from the beginning, in order to find the first element of the value specified in its argument.
element searched for must occur in the sequence - its absence will cause a ValueError exception!!!
method returns the index of the first occurrence of the argument
"aAbByYzZaA".index("b") >>> 2

16. Operations on strings: the list() function
The list() function takes its argument (a string) and creates a new list containing all the string's characters, one per list element.
list() is able to create a new list from many other entities (e.g., from tuples and dictionaries).

list("abcabc") >>> ['a', 'b', 'c', 'a', 'b', 'c']

17. Operations on strings: the count() method
counts all occurrences of the element inside the sequence.
The absence of such elements doesn't cause any problems.
'abcabc'.count("d") >>> 0

https://docs.python.org/3.4/library/stdtypes.html#string-methods.

18. Key takeaways

1. Python strings are immutable sequences and can be indexed, sliced, and iterated like any other sequence, as well as being subject to the in and not in operators. There are two kinds of strings in Python:

one-line strings, which cannot cross line boundaries – we denote them using either apostrophes ('string') or quotes ("string")
multi-line strings, which occupy more than one line of source code, delimited by trigraphs:

'''
string
'''


or

"""
string
"""


2. The length of a string is determined by the len() function. The escape character (\) is not counted. For example:

print(len("\n\n"))


outputs 2.


3. Strings can be concatenated using the + operator, and replicated using the * operator. For example:

asterisk = '*'
plus = "+"
decoration = (asterisk + plus) * 4 + asterisk
print(decoration)


outputs *+*+*+*+*.


4. The pair of functions chr() and ord() can be used to create a character using its codepoint, and to determine a codepoint corresponding to a character. Both of the following expressions are always true:

chr(ord(character)) == character
ord(chr(codepoint)) == codepoint


5. Some other functions that can be applied to strings are:

list() – create a list consisting of all the string's characters;
max() – finds the character with the maximal codepoint;
min() – finds the character with the minimal codepoint.

6. The method named index() finds the index of a given substring inside the string.


Exercise 1

What is the length of the following string assuming there is no whitespaces between the quotes?

"""
"""


Check
1



Exercise 2

What is the expected output of the following code?

s = 'yesteryears'
the_list = list(s)
print(the_list[3:6])


Check
['t', 'e', 'r']



Exercise 3

What is the expected output of the following code?

for ch in "abc":
    print(chr(ord(ch) + 1), end='')


Check
bcd

https://edube.org/learn/pe-2/section-summary-93


19. The capitalize() method
 it creates a new string filled with characters taken from the source string
if the first character inside the string is a letter (note: the first character is an element with an index equal to 0, not just the first visible character), it will be converted to upper-case;
all remaining letters from the string will be converted to lower-case.

the original string (from which the method is invoked) is not changed !!!
the modified (capitalized in this case) string is returned as a result

print("Alpha".capitalize())
print('ALPHA'.capitalize())
print(' Alpha'.capitalize())
print('123'.capitalize())
print("αβγδ".capitalize())

Returns:
Alpha
Alpha
 alpha
123
Αβγδ


20. The center() method
method makes a copy of the original string trying to center it inside a field of a specified width.
The centering is actually done by adding some spaces before and after the string.

If the target field's length is too small to fit the string, the original string is returned.

print('[' + 'Beta'.center(2) + ']')
print('[' + 'Beta'.center(4) + ']')
print('[' + 'Beta'.center(6) + ']')

[Beta]
[Beta]
[ Beta ]

The two-parameter variant of center() makes use of the character from the second argument, instead of a space.
print('[' + 'gamma'.center(20, '*') + ']')
[*******gamma********]


21. The endswith() method
checks if the given string ends with the specified argument and returns True or False
t = "zeta"
print(t.endswith("a"))
print(t.endswith("A"))
print(t.endswith("et"))
print(t.endswith("eta"))

Returns:
True
False
False
True

22. The find() method
is similar to index() -  - it looks for a substring and returns the index of first occurrence of this substring
it's safer - it doesn't generate an error for an argument containing a non-existent substring
!!!! it works with strings only !!!!

print("Eta".find("ta"))
print("Eta".find("mma"))
1
-1

Note: don't use find() if you only want to check if a single character occurs within a string - the in operator will be significantly faster.

two-parameter variant of the find() method - The second argument specifies the index at which the search will be started
print('kappa'.find('a', 2)) >>> 4
print('kappa'.find('a', 1)) >>> 1

three-parameter mutation of the find() method - third arg is actually the upper limit of the search
print('kappa'.find('a', 1, 4))
print('kappa'.find('a', 2, 4))
1
-1


23. The isalnum() method
parameterless method named isalnum() checks if the string contains only digits or alphabetical characters (letters), and returns True or False

print('lambda30'.isalnum())
print('lambda'.isalnum())
print('30'.isalnum())
print('@'.isalnum())
print('lambda_30'.isalnum())
print(''.isalnum())
True
True
True
False
False
False


24. The isalpha() method
it's interested in letters only.

25. The isdigit() method
method looks at digits only -

26. The islower() method
it accepts lower-case letters only.

print("Moooo".islower())
print('moooo'.islower())
False
True

27. The isspace() method
identifies whitespaces only

print(' \n '.isspace())
print(" ".isspace())
print("mooo mooo mooo".isspace())

True
True
False

28. The isupper() method
it concentrates on upper-case letters only.

print("Moooo".isupper())
print('moooo'.isupper())
print('MOOOO'.isupper())

False
False
True

29. The join() method
performs a join - it expects one argument as a list;
!!! it must be assured that all the list's elements are strings !!! - the method will raise a TypeError exception otherwise;

all the list's elements will be joined into one string but...
...the string from which the method has been invoked is used as a separator, put among the strings;
the newly created string is returned as a result.

print(",".join(["omicron", "pi", "rho"]))
omicron,pi,rh

30.The lower() method
makes a copy of a source string, replaces all upper-case letters with their lower-case counterparts, and returns the string as the result
the source string remains untouched.

Note: The lower() method doesn't take any parameters.
print("SiGmA=60".lower()) >>> sigma=60


31. The lstrip() method
https://edube.org/learn/pe-2/string-methods-58

parameterless lstrip() method returns a newly created string formed from the original one by removing all leading whitespaces.
print("[" + " tau ".lstrip() + "]") >>> [tau ]

one-parameter lstrip() method does the same as its parameterless version, but removes all characters enlisted
in its argument (a string), not just whitespaces:
print("www.cisco.com".lstrip("w.")) >>> cisco.com

print("pythoninstitute.org".lstrip(".org")) >>> pythoninstitute.org
!!! Leading characters, leading whitespaces !!!


32. The replace() method
two-parameter replace() method returns a copy of the original string in which all occurrences of the first argument have been replaced by the second argument.

print("www.netacad.com".replace("netacad.com", "pythoninstitute.org"))
print("This is it!".replace("is", "are"))
print("Apple juice".replace("juice", ""))
www.pythoninstitute.org
Thare are it!
Apple

 three-parameter replace() variant uses the third argument (a number) to limit the number of replacements.
print("This is it!".replace("is", "are", 1))
Thare is it!


33. The rfind() method
The one-, two-, and three-parameter methods named rfind()

print("tau tau tau".rfind("ta"))
print("tau tau tau".rfind("ta", 9))
print("tau tau tau".rfind("ta", 3, 9))
8
-1
4

34. The rstrip() method
print("[" + " upsilon ".rstrip() + "]")
print("cisco.com".rstrip(".com"))
[ upsilon]
cis

35. The split() method
it splits the string and builds a list of all detected substrings.
The method assumes that the substrings are delimited by whitespaces
If the string is empty, the resulting list is empty too.

Note: the reverse operation can be performed by the join() method.

print("phi       chi\npsi".split())
print("".split())
['phi', 'chi', 'psi']
[]

https://edube.org/learn/pe-2/string-methods-62

35. The startswith() method
startswith() method is a mirror reflection of endswith() - it checks if a given string starts with the specified substring.

print("omega".startswith("meg"))
print("omega".startswith("om"))
False
True

36. The strip() method
method combines the effects caused by rstrip() and lstrip() - it makes a new string lacking all the leading and trailing whitespaces.

s = 'www.tsosniawk.pl'
s.strip('w.pl')
>>> 'tsosniawk'

37. The swapcase() method
method makes a new string by swapping the case of all letters within the source string: lower-case characters become upper-case, and vice versa.
All other characters remain untouched.

print("I know that I know nothing.".swapcase())
i KNOW THAT i KNOW NOTHING.

38. The title() method
changes every word's first letter to upper-case, turning all other ones to lower-case.

print("I know that I know nothing. Part 1.".title())
I Know That I Know Nothing. Part 1.

s = 'www.tsosniawk.pl'
s.title()
>>> 'Www.Tsosniawk.Pl'


39. The upper() method
makes a copy of the source string, replaces all lower-case letters with their upper-case counterparts, and returns the string as the result.

print("I know that I know nothing. Part 2.".upper())
I KNOW THAT I KNOW NOTHING. PART 2.


40. Key takeaways

1. Some of the methods offered by strings are:

capitalize() – changes all string letters to capitals;
center() – centers the string inside the field of a known length;
count() – counts the occurrences of a given character;
join() – joins all items of a tuple/list into one string;
lower() – converts all the string's letters into lower-case letters;
lstrip() – removes the white characters from the beginning of the string;
replace() – replaces a given substring with another;
rfind() – finds a substring starting from the end of the string;
rstrip() – removes the trailing white spaces from the end of the string;
split() – splits the string into a substring using a given delimiter;
strip() – removes the leading and trailing white spaces;
swapcase() – swaps the letters' cases (lower to upper and vice versa)
title() – makes the first letter in each word upper-case;
upper() – converts all the string's letter into upper-case letters.

2. String content can be determined using the following methods (all of them return Boolean values):

endswith() – does the string end with a given substring?
isalnum() – does the string consist only of letters and digits?
isalpha() – does the string consist only of letters?
islower() – does the string consists only of lower-case letters?
isspace() – does the string consists only of white spaces?
isupper() – does the string consists only of upper-case letters?
startswith() – does the string begin with a given substring?



Exercise 1

What is the expected output of the following code?

for ch in "abc123XYX":
    if ch.isupper():
        print(ch.lower(), end='')
    elif ch.islower():
        print(ch.upper(), end='')
    else:
        print(ch, end='')


Check
ABC123xyz


Exercise 2

What is the expected output of the following code?

s1 = 'Where are the snows of yesteryear?'
s2 = s1.split()
print(s2[-2])


Check
of


Exercise 3

What is the expected output of the following code?

the_list = ['Where', 'are', 'the', 'snows?']
s = '*'.join(the_list)
print(s)


Check
Where*are*the*snows?


Exercise 4

What is the expected output of the following code?

s = 'It is either easy or impossible'
s = s.replace('easy', 'hard').replace('im', '')
print(s)


Check
It is either hard or possible


41. Comparing strings
https://edube.org/learn/pe-2/string-in-action-12



































